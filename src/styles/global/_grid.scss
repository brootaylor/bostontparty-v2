/******************************************
 * Grid styles / rules
 * Thank you, https://hankchizljaw.com/wrote/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
 ******************************************/


/// 1. The `.auto-grid` class is for fluid non-specific grid layout scenarios. No media queries are used.
///
/// 2. A progressive enhancement implementation (for modern browsers) is used as follows.
/// If the browser supports `grid`, it'll also support the `@supports` feature.
///
/// @link https://hankchizljaw.com/wrote/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/ 1. A responsive `grid` layout without using media queries.
/// @link https://hankchizljaw.com/wrote/keeping-it-simple-with-css-that-scales/ 2. Keeping it simple with CSS that scales.
///
/// @todo May need to write `display: flex` rules for older browser grid layout (if necessary)
///
/// @group Grid
/// @example scss - Usage
///   @supports (display: grid) {
///     .auto-grid {
///       display: grid;
///       grid-template-columns: repeat(auto-fit, minmax(var(--auto-grid-min-size), 1fr));
///       grid-gap: 1rem;
///
///       > * {
///         max-width: unset;
///       }
///
///       > * + * {
///         margin-top: unset;
///       }
///     }
///   }
///
.auto-grid {
  --auto-grid-min-size: 16rem;

  > * {
    max-width: 400px;
  }

  > * + * {
    margin-top: 1rem;
  }
}

/// Progressive enhancement method
/// If the browser supports `grid`, it'll also support the `@supports` feature.
/// @group Grid
@supports (display: grid) {
  .auto-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(var(--auto-grid-min-size), 1fr)); // Using `auto-fit` so the columns use all available space
    grid-gap: 1rem;

    > * {
      max-width: unset;
    }

    > * + * {
      margin-top: unset;
    }
  }
}





// Experimental grid layout
// Generic rules
.grid-home {
	background-color: $black;
	height: auto;
	transition: height 0.3s ease-in-out;

		@media (min-width: 800px) and (min-height: 860px) {
			height: calc(100vh - 10.2em);
		}

	.grid-panel {
		padding-bottom: 10px;
	}

	& > .grid-panel {
		padding-bottom: 0;
	}
}

// Flexbox fallback rules
.grid-home {
	@media (min-width: 800px) {
		display: flex;
		flex-wrap: nowrap;
	}

	& > .grid-panel {
		@media (min-width: 800px) {
			display: flex;
			flex-direction: column;
			flex: 1 1 50%;
			max-width: 50%;
		}

		&:first-child {
			@media (min-width: 800px) {
				padding-right: 10px;
			}

			.grid-panel {
				&:first-child {
					@media (min-width: 800px) {
						height: 50%;
					}

					@media (min-width: 1350px) {
						height: 45%;
					}
				}

				&:last-child {
					@media (min-width: 800px) {
						height: 50%;
						padding-bottom: 0;
					}

					@media (min-width: 1350px) {
						height: 55%;
					}
				}
			}
		}

		&:last-child {
			@media (min-width: 800px) {
				flex-direction: row;
				flex-wrap: wrap;
			}

			.grid-panel {
				@media (min-width: 800px) {
					flex-basis: 100%;
					max-width: 100%;
				}

				&:first-child {
					@media (min-width: 1350px) {
						height: 55%;
					}
				}

				&:nth-child(2),
				&:last-child {
					@media (min-width: 800px) {
						flex-basis: 100%;
						max-width: 100%;
					}

					@media (min-width: 1350px) {
						flex: 1 1 50%;
						max-width: 50%;
						height: 45%;
					}
				}

				&:nth-child(2) {
					@media (min-width: 1350px) {
						padding-right: 10px;
						padding-bottom: 0;
					}
				}

				&:last-child {
					padding-bottom: 0;
				}
			}
		}
	}
}

// Feature query to make sure that only browsers supporting the new Grid CSS properties read the following code...
// * This is to progressively enhance
// * The fallback rules (above) will eventually be removed
@supports (display: grid) {
	.grid-home {
			@media (min-width: 800px) {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				grid-gap: 10px;
			}

		.grid-panel {
			@media (min-width: 800px) {
				margin: 0;
				padding: 0;
			}
		}

		& > .grid-panel {
			@media (min-width: 800px) {
				display: grid;
				grid-gap: 10px;
				max-width: 100%;
			}

			&:first-child {
				@media (min-width: 800px) {
					grid-template-rows: repeat(2, 1fr);
					padding-right: 0;
				}

				@media (min-width: 1350px) {
					grid-template-rows: 1fr 1.2fr;
				}

				.grid-panel {
					&:first-child {
						@media (min-width: 800px) {
							height: auto;
						}
					}

					&:last-child {
						@media (min-width: 800px) {
							height: auto;
							padding-bottom: 0;
						}
					}
				}
			}

			&:last-child {
				@media (min-width: 800px) {
					grid-template-rows: repeat(3, 1fr);
				}

				@media (min-width: 1350px) {
					grid-template-columns: repeat(2, 1fr);
					grid-template-rows: 1.2fr 1fr;
				}

				.grid-panel {
					&:first-child {
						@media (min-width: 1350px) {
							grid-column: 1 / 3;
							grid-row: 1;
							height: auto;
						}
					}

					&:nth-child(2) {
						@media (min-width: 1350px) {
							grid-column: 1;
							grid-row: 2;
							height: auto;
							max-width: 100%;
							padding-right: 0;
						}
					}

					&:last-child {
						@media (min-width: 1350px) {
							grid-column: 2;
							grid-row: 2;
							height: auto;
							max-width: 100%;
						}
					}
				}
			}
		}
	}
}
